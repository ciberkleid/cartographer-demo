#
# Note:
# Why use kapp App in addition to kapp Config and Knative Service?
# Knative updates the Service under the hood to include some extra annotations
# that _can't_ be mutated once applied by Knative's controller.
# The kapp App resource makes it possible to enforce this protection as it can
# be configured to not patch certain features (this can't be done with Cartographer
# alone yet).
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: app-deploy-kapp2knative
spec:
  params:
    - name: containerPort
      default: 8080
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: $(workload.metadata.name)$
    spec:
      serviceAccountName: service-account
      fetch:
        - inline:
            paths:
              manifest.yml: |
                ---
                apiVersion: kapp.k14s.io/v1alpha1
                kind: Config
                rebaseRules:
                  - path:
                      - metadata
                      - annotations
                      - serving.knative.dev/creator
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: &matchers
                      - apiVersionKindMatcher:
                          apiVersion: serving.knative.dev/v1
                          kind: Service
                  - path:
                      - metadata
                      - annotations
                      - serving.knative.dev/lastModifier
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: *matchers
                ---
                apiVersion: serving.knative.dev/v1
                kind: Service
                metadata:
                  name: $(workload.metadata.name)$
                spec:
                  template:
                    metadata:
                      annotations:
                        autoscaling.knative.dev/minScale: "1"
                    spec:
                      serviceAccountName: service-account
                      containers:
                        - name: workload
                          image: $(images.image.image)$
                          env: $(workload.spec.env)$
                          resources: $(workload.spec.resources)$
                          ports:
                            - containerPort: $(params.containerPort)$
                          securityContext:
                            runAsUser: 1000
      template:
        - ytt: {}
      deploy:
        - kapp: {}